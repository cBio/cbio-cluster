{"name":"MSKCC cBio cluster documentation","tagline":"MSKCC cBio cluster documentation","body":"### MSKCC cBio Cluster User Guide\r\n\r\n## Overview\r\nThe cBio cluster consists of 30 Exxact dual-socket E5-2665 2.4GHz nodes (32 hyperthreads/node) with 256GB of memory.  Each node is configured with 4x NVIDIA GTX-680 [20 nodes] or 4x GTX-Titan [10 nodes] GPUs.\r\n\r\n## System configuration\r\n\r\nThere are 30 compute nodes in the cluster, each containing\r\n* 2x [Intel Xeon E5-2665 2.4GHz CPUs](http://ark.intel.com/products/64597/) in [hyperthreaded](http://en.wikipedia.org/wiki/Hyper-threading) mode, providing a total of 32 threads per node\r\n* 256GB memory\r\n* 4x NVIDIA GPUs per node, either [4GB GTX-680s](http://www.geforce.com/hardware/desktop-gpus/geforce-gtx-680/specifications) [20 nodes] or [6GB GTX-Titans](http://www.geforce.com/hardware/desktop-gpus/geforce-gtx-titan/specifications)\r\n* 10GE ethernet interfaces\r\nThe compute nodes are provided by [Exxact Corp](http://exxactcorp.com/)\r\n\r\n## Storage subsystem\r\n\r\n# Overview\r\nFast local filesystem storage for the cluster is provided by a [GPFS](http://www-03.ibm.com/systems/software/gpfs/) filesystem hosted on Dell servers.  This filesystem is intended for caching local datasets and production storage, rather than long-term data archival.  This storage is shared by all cBio groups, and quotas will be enforced after a friendly user period ends.\r\n\r\n# Home directories\r\n\r\n# Group shared directories\r\n\r\n# Local node scratch space\r\n\r\n# Architecture\r\n\r\n## System access\r\n\r\n# Obtaining access\r\n\r\n# Logging in\r\n\r\n# Passwords\r\n\r\nPassword-based login is not currently supported.  Login via activation of trusted ssh access is currently the only login method supported.\r\n\r\n## Globally-installed software\r\n\r\n# Installed software packages\r\n\r\n# Modules\r\n\r\n# Requesting installation of additional software\r\n\r\n## Compiling code on the cluster\r\n\r\n## Running jobs on the cluster\r\n\r\n# Batch queue system overview\r\nThe batch queue system is still undergoing trials and tuning.  We currently use the [slurm](https://computing.llnl.gov/linux/slurm/) batch queue system (see below).\r\n\r\n# Submitting jobs to the batch queue system\r\n\r\n# Submitting GPU jobs to the batch queue system\r\n\r\nExample:\r\n```\r\n#!/bin/tcsh\r\n#  Batch script for MPI GPU job on the cbio cluster\r\n#  utilizing 4 GPUs, with one thread/GPU\r\n#\r\n#SBATCH --job-name=jobname\r\n#SBATCH --time=12:00:00\r\n#SBATCH --partition=gpu\r\n#SBATCH --nodes=1\r\n#SBATCH --ntasks-per-node=4\r\n#SBATCH --output=jobname-%j.stdout\r\n#SBATCH --error=jobname-%j.stderr\r\n#SBATCH --gres=gpu:4\r\n```\r\n\r\n# Monitoring batch jobs\r\n\r\n# Interactive jobs\r\n\r\nYou can use `srun --pty -I --partition=active` to start interactive jobs.\r\n\r\nExample: To start an interactive job with time limit of 1 hour, using up to 1GB of memory, requesting one GPU (GTX-Titan), and starting the `tcsh` shell: \r\n```\r\nsrun --pty -I --mem=1000M --partition=active --gres=gpu:1 --constraint=gtxtitan tcsh\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}